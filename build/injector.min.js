/*
* injectorjs - v0.10.0 - 2014-09-07
* http://github.com/aaronius/injectorjs
* Aaron Hardy; Licensed MIT
*/
!function(a,b){"object"==typeof exports?module.exports=b(a):"function"==typeof define&&define.amd?define(function(){return b(a)}):a.Injector=b(a)}(this,function(a){"use strict";var b=a.Injector,c=function(a){return void 0===a},d=Object.prototype.toString,e=function(a){return"[object String]"===d.call(a)},f=function(a){var b=Object;return a===b(a)},g=function(a){return"[object Function]"===d.call(a)},h=function(b){var c=a[b];if(c)return c;for(var d=b.split("."),e=a,f=0,g=d.length;g>f;f++)e=e[d[f]];return e},i=function(a,b){this._injector=a,this.key=b},j=i.prototype;j.get=function(){if(!c(this._cache))return this._cache;var a=this._create();return this._asSingleton&&(this._cache=a),f(a)&&this._injector.injectInto(a),a},j.asSingleton=function(a){return this._asSingleton=!0,a&&this.get(),this},j.toConstructor=function(a){return this._create=function(){var b=a;if(e(a)&&(b=h(a),!b))throw new Error("No constructor found for "+a);return new b},this},j.toFactory=function(a){return this._create=a,this},j.toValue=function(a){return this._cache=a,this};var k=function(a){this._mappings={},this.parentInjector=a};return k.noConflict=function(){return a.Injector=b,this},j=k.prototype,j.map=function(a){var b=new i(this,a);return this._mappings[a]=b,b},j.unmap=function(a){return delete this._mappings[a],this},j._getMapping=function(a){var b=this._mappings[a];return!b&&this.parentInjector&&(b=this.parentInjector._getMapping(a)),b},j.hasMapping=function(a){return!c(this._mappings[a])},j.get=function(a,b,c){if(a){e(a)&&(a=[a]);for(var d=0,f=a.length;f>d;d++){var g=a[d],h=this._getMapping(g);if(!h)throw new Error('Mapping not found for key "'+g+'".');if(!b)return h.get();b.call(c||this,g,h.get())}}},j.createChildInjector=function(){return new k(this)},j.getInjectionPoints=function(a){return g(a.$inject)?a.$inject():a.$inject},j.applyInjections=function(a,b){this[a]=b},j.getPostInjectMethodName=function(){return"$postInject"},j.injectInto=function(a){if(!a)return this;var b=this.getInjectionPoints(a);b&&this.get(b,a.$applyInjections||this.applyInjections,a);var c=this.getPostInjectMethodName(a);return c&&g(a[c])&&a[c](),this},k});